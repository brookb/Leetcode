Walls and Gates My Submissions Question Solution 
Total Accepted: 1376 Total Submissions: 4552 Difficulty: Medium
You are given a m x n 2D grid initialized with these three possible values.

-1 - A wall or an obstacle.
0 - A gate.
INF - Infinity means an empty room. We use the value 231 - 1 = 2147483647 to represent INF as you may assume that the distance to a gate is less than 2147483647.
Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with INF.

For example, given the 2D grid:
INF  -1  0  INF
INF INF INF  -1
INF  -1 INF  -1
  0  -1 INF INF
After running your function, the 2D grid should be:
  3  -1   0   1
  2   2   1  -1
  1  -1   2  -1
  0  -1   3   4
  
  
  
  
  public class Solution {
    public void wallsAndGates(int[][] rooms) {
     int m = rooms.length;
     if(m==0)   return ;
     int n = rooms[0].length;
     for(int i=0; i < m; i++ ){
         for(int j = 0; j< n; j++){
             if(rooms[i][j] == 0){
                 bfs(rooms,i,j);
             }
         }
     }
    }
    public void bfs(int[][] rooms, int r, int c){
        // ArrayList<ArrayList<Integer>> next = next(rooms,r,c);
        // for(ArrayList<Integer> p : next){
        //     int nr = p.get(0);
        //     int nc = p.get(1);
        //     if(rooms[nr][nc] <= rooms[r][c]+1)   continue;
        //     rooms[nr][nc] = rooms[r][c]+1;
        //     bfs(rooms,nr,nc);
        // }
        int m = rooms.length;
        int n = rooms[0].length;
        if(r > 0 && rooms[r-1][c] >rooms[r][c] +1 ){
            rooms[r-1][c] = rooms[r][c] +1;
            bfs(rooms,r-1,c);
        }
        if(r < m-1 && rooms[r+1][c] >rooms[r][c]+1  ){
             rooms[r+1][c] = rooms[r][c] +1;
            bfs(rooms,r+1,c);
        }
        if(c > 0 && rooms[r][c-1] >rooms[r][c] +1 ){
             rooms[r][c-1] = rooms[r][c] +1;
             bfs(rooms,r,c-1);
        }
        if(c < n-1 && rooms[r][c+1] >rooms[r][c] +1 ){
             rooms[r][c+1] = rooms[r][c] +1;
            bfs(rooms,r,c+1);
        }
    }
    public ArrayList<ArrayList<Integer>> next(int[][]rooms,int r, int c){
        ArrayList<ArrayList<Integer>> res = new ArrayList<>();
        int m = rooms.length;
        int n = rooms[0].length;
        if(r > 0 && rooms[r-1][c] >rooms[r][c] +1 ){
            ArrayList<Integer> p = new ArrayList<>();
            p.add(r-1); p.add(c);
            res.add(p);
        }
        if(r < m-1 && rooms[r+1][c] >rooms[r][c]+1  ){
            ArrayList<Integer> p = new ArrayList<>();
            p.add(r+1); p.add(c);
            res.add(p);
        }
        if(c > 0 && rooms[r][c-1] >rooms[r][c] +1 ){
            ArrayList<Integer> p = new ArrayList<>();
            p.add(r); p.add(c-1);
            res.add(p);
        }
        if(c < n-1 && rooms[r][c+1] >rooms[r][c] +1 ){
            ArrayList<Integer> p = new ArrayList<>();
            p.add(r); p.add(c+1);
            res.add(p);
        }
        return res;
    }
}
