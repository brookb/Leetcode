Zigzag Iterator My Submissions Question Solution 
Total Accepted: 1774 Total Submissions: 4884 Difficulty: Medium
Given two 1d vectors, implement an iterator to return their elements alternately.

For example, given two 1d vectors:

v1 = [1, 2]
v2 = [3, 4, 5, 6]
By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1, 3, 2, 4, 5, 6].

Follow up: What if you are given k 1d vectors? How well can your code be extended to such cases?

Clarification for the follow up question - Update (2015-09-18):
The "Zigzag" order is not clearly defined and is ambiguous for k > 2 cases. If "Zigzag" does not look right to you, replace "Zigzag" with "Cyclic". For example, given the following input:

[1,2,3]
[4,5,6,7]
[8,9]
It should return [1,4,8,2,5,9,3,6,7].





public class ZigzagIterator {
    //strore the index inside list
    int index = 0;
    //store the list index
    int k = 0;
    List<List<Integer>> list = new ArrayList<>();
    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        if(v1.size()>0)
        list.add(v1);
        if(v2.size()>0)
        list.add(v2);
    }
    public int next() {
        return list.get(k++).get(index);
    }

    public boolean hasNext() {
        if(list.size() > 0){
            if(k == list.size()){
                k = 0;
                index++;
            }
            if(index >= list.get(k).size()){
                //look down to find next position
                int t = k;
                k = (t+1)%list.size();
                while(k!=t && index >= list.get(k).size())
                     k = (k+1)%list.size();
                if(k==t)    return false;
                
                k = (t+1)%list.size();
                while(k!=0 && index >=   list.get(k).size())
                    k = (k+1)%list.size();
                if(k==0){
                    index++;
                    return hasNext();
                }
            }
            return true;
        }
        return false;
    }
}





https://leetcode.com/discuss/58683/c-with-queue-compatible-with-k-vectors
