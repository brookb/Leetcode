Graph Valid Tree My Submissions Question Solution 
Total Accepted: 2526 Total Submissions: 9853 Difficulty: Medium
Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.

For example:

Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.

Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.

Hint:

Given n = 5 and edges = [[0, 1], [1, 2], [3, 4]], what should your return? Is this case a valid tree?
According to the definition of tree on Wikipedia: “a tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.”
Note: you can assume that no duplicate edges will appear in edges. Since all edges are undirected, [0, 1] is the same as [1, 0] and thus will not appear together in edges.




public class Solution {
    public boolean validTree(int n, int[][] edges) {
      //the second time trying ----fail.....TAT
      //quick union
      //the idea is constructing a graph(union find)-->which can get the root
      //no cycle--->to unconnected nodes don't have common root
      //all connected: edge number == n-1 and no cycle
      int[] graph = new int[n];
      for(int i = 0; i < n; i++)    graph[i]=i;
      if(n != edges.length+1)   return false;
      for(int i = 0 ; i < edges.length; i++){
          int x =  findroot(graph,edges[i][0]);
          int y  = findroot(graph,edges[i][1]);
          if(x==y)  return false;
          graph[y] = x;
      }
      return true;
    }
    public int findroot(int[] graph,int node){
        while(graph[node]!=node){
            node = graph[node];
        }
        return node;
    }
}
