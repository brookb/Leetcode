Closest Binary Search Tree Value My Submissions Question Solution 
Total Accepted: 2672 Total Submissions: 8985 Difficulty: Easy
Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.

Note:
Given target value is a floating point.
You are guaranteed to have only one unique value in the BST that is closest to the target.









public class Solution {
    public int closestValue(TreeNode root, double target) {
        if(root == null)    return Integer.MAX_VALUE;
        int res = root.val;
        double diff = Math.abs(root.val - target);
        if(diff == 0)   return root.val;
        if(root.val > target&&root.left!=null){
            int left = closestValue(root.left,target);
            if(diff  > Math.abs(target - left))
                res = left;
        }
        else if(root.val < target&&root.right!=null){
            int right = closestValue(root.right,target);
            if(diff  > Math.abs(target - right))
                res = right;
        }
        return res;
    }
}



iterative solution:
https://leetcode.com/discuss/55460/simple-iterative-java-solution-with-explaination
public int closestValue(TreeNode root, double target) {
        int closestVal = root.val; 
        while(root != null){ 
            //update closestVal if the current value is closer to target
            closestVal = (Math.abs(target - root.val) < Math.abs(target - closestVal))? root.val : closestVal;
            if(closestVal == target){   //already find the best result
                return closestVal;
            }
            root = (root.val > target)? root.left: root.right;   //binary search
        }
        return closestVal;
  }


