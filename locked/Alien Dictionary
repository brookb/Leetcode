Alien Dictionary My Submissions Question Solution 
Total Accepted: 1613 Total Submissions: 9327 Difficulty: Hard
There is a new alien language which uses the latin alphabet. However, the order among letters are unknown to you. You receive a list of words from the dictionary, where words are sorted lexicographically by the rules of this new language. Derive the order of letters in this language.

For example,
Given the following words in dictionary,

[
  "wrt",
  "wrf",
  "er",
  "ett",
  "rftt"
]
The correct order is: "wertf".

Note:
You may assume all letters are in lowercase.
If the order is invalid, return an empty string.
There may be multiple valid order of letters, return any one of them is fine.






https://leetcode.com/discuss/54188/16-18-lines-python-29-lines-c
Two similar solutions. Both first go through the word list to find letter pairs (a, b) where a must come before b in the alien alphabet. The first solution just works with these pairs, the second is a bit smarter and uses successor lists and predecessor counters. Doesn't make a big difference here, though, I got both accepted in 48 ms.

Solution 1

def alienOrder(self, words):
    less = []
    for pair in zip(words, words[1:]):
        for a, b in zip(*pair):
            if a != b:
                less += a + b,
                break
    chars = set(''.join(words))
    order = []
    while less:
        free = chars - set(zip(*less)[1])
        if not free:
            return ''
        order += free
        less = filter(free.isdisjoint, less)
        chars -= free
    return ''.join(order + list(chars))
Solution 2

def alienOrder(self, words):
    pre, suc = collections.defaultdict(int), collections.defaultdict(set)
    for pair in zip(words, words[1:]):
        for a, b in zip(*pair):
            if a != b:
                suc[a].add(b)
                pre[b] += 1
                break
    chars = set(''.join(words))
    free = chars - set(pre)
    order = ''
    while free:
        a = free.pop()
        order += a
        for b in suc[a]:
            pre[b] -= 1
            if pre[b] == 0:
                free.add(b)
    return order * (set(order) == chars)
C++ version of solution 2

string alienOrder(vector<string>& words) {
    map<char, set<char>> suc;
    map<char, int> pre;
    set<char> chars;
    string s;
    for (string t : words) {
        chars.insert(t.begin(), t.end());
        for (int i=0; i<min(s.size(), t.size()); ++i) {
            char a = s[i], b = t[i];
            if (a != b) {
                suc[a].insert(b);
                ++pre[b];
                break;
            }
        }
        s = t;
    }
    set<char> free = chars;
    for (auto ci : pre)
        free.erase(ci.first);
    string order;
    while (free.size()) {
        char a = *begin(free);
        free.erase(a);
        order += a;
        for (char b : suc[a])
            if (--pre[b] == 0)
                free.insert(b);
    }
    return order.size() == chars.size() ? order : "";
}
