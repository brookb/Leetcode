3Sum Smaller My Submissions Question Solution 
Total Accepted: 2097 Total Submissions: 6107 Difficulty: Medium
Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.

For example, given nums = [-2, 0, 1, 3], and target = 2.

Return 2. Because there are two triplets which sums are less than 2:

[-2, 0, 1]
[-2, 0, 3]
Follow up:
Could you solve it in O(n2) runtime?








public class Solution {
    public int threeSumSmaller(int[] nums, int target) {
        //same idea as 3Sum
        //when ever the sum is equal or bigger than target, enter next big loop
        Arrays.sort(nums);
        int res = 0;
        for(int i = 0; i <= nums.length-3; i++){
            //allow duplicates
            int left = i+1, right = nums.length-1;
            int sum = target - nums[i];
            while(left < right){
                if(nums[left] + nums[right] >= sum)
                    right--;
                else if(nums[left] + nums[right] < sum){
                    //
                    res += right-left;
                    left++;
                }
            }
        }
        return res;
    }
}
